Coverage Report by instance with details

=================================================================================
=== Instance: /\ALSU_tb#DUT 
=== Design Unit: work.ALSU
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        32        23         9    71.87%

================================Branch Details================================

Branch Coverage for instance /\ALSU_tb#DUT 

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU.v
------------------------------------IF Branch------------------------------------
    23                                        82     Count coming in to IF
    23              1                          8       if(rst) begin
    34              1                         74       end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    50                                        82     Count coming in to IF
    50              1                          8       if(rst) begin
    52              1                         74       end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    53                                        74     Count coming in to IF
    53              1                         25           if (invalid)
    55              1                         49           else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    62                                        75     Count coming in to IF
    62              1                          8       if(rst) begin
    65              1                         67       else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    66                                        67     Count coming in to IF
    66              1                         25         if (invalid) 
    68              1                    ***0***         else if (bypass_A_reg && bypass_B_reg)
    70              1                    ***0***         else if (bypass_A_reg)
    72              1                    ***0***         else if (bypass_B_reg)
    75              1                         42         else begin
Branch totals: 2 hits of 5 branches = 40.00%

------------------------------------CASE Branch------------------------------------
    76                                        42     Count coming in to CASE
    77              1                         14               3'h0: begin
    88              1                          9               3'h1: begin
    98              1                          4               3'h2:begin
    105             1                          4               3'h3: out <= A_reg * B_reg;
    106             1                          8               3'h4: begin
    112             1                          3               3'h5: begin
                                         ***0***     All False Count
Branch totals: 6 hits of 7 branches = 85.71%

------------------------------------IF Branch------------------------------------
    79                                        14     Count coming in to IF
    79              1                    ***0***                 if (red_op_A_reg && red_op_B_reg)
    81              1                    ***0***                 else if (red_op_A_reg) 
    83              1                    ***0***                 else if (red_op_B_reg)
    85              1                         14                 else 
Branch totals: 1 hit of 4 branches = 25.00%

------------------------------------IF Branch------------------------------------
    89                                         9     Count coming in to IF
    89              1                    ***0***                 if (red_op_A_reg && red_op_B_reg)
    91              1                    ***0***                 else if (red_op_A_reg) 
    93              1                          1                 else if (red_op_B_reg)
    95              1                          8                 else 
Branch totals: 2 hits of 4 branches = 50.00%

------------------------------------IF Branch------------------------------------
    107                                        8     Count coming in to IF
    107             1                          3                 if (direction_reg)
    109             1                          5                 else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    113                                        3     Count coming in to IF
    113             1                          2                 if (direction_reg)
    115             1                          1                 else
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       6         0         6     0.00%

================================Condition Details================================

Condition Coverage for instance /\ALSU_tb#DUT  --

  File ALSU.v
----------------Focused Condition View-------------------
Line       68 Item    1  (bypass_A_reg && bypass_B_reg)
Condition totals: 0 of 2 input terms covered = 0.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  bypass_A_reg         N  '_1' not hit             Hit '_1'
  bypass_B_reg         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  bypass_A_reg_0        -                             
  Row   2:    ***0***  bypass_A_reg_1        bypass_B_reg                  
  Row   3:    ***0***  bypass_B_reg_0        bypass_A_reg                  
  Row   4:    ***0***  bypass_B_reg_1        bypass_A_reg                  

----------------Focused Condition View-------------------
Line       79 Item    1  (red_op_A_reg && red_op_B_reg)
Condition totals: 0 of 2 input terms covered = 0.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  red_op_A_reg         N  '_1' not hit             Hit '_1'
  red_op_B_reg         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        -                             
  Row   2:    ***0***  red_op_A_reg_1        red_op_B_reg                  
  Row   3:    ***0***  red_op_B_reg_0        red_op_A_reg                  
  Row   4:    ***0***  red_op_B_reg_1        red_op_A_reg                  

----------------Focused Condition View-------------------
Line       89 Item    1  (red_op_A_reg && red_op_B_reg)
Condition totals: 0 of 2 input terms covered = 0.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  red_op_A_reg         N  '_1' not hit             Hit '_1'
  red_op_B_reg         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        -                             
  Row   2:    ***0***  red_op_A_reg_1        red_op_B_reg                  
  Row   3:    ***0***  red_op_B_reg_0        red_op_A_reg                  
  Row   4:    ***0***  red_op_B_reg_1        red_op_A_reg                  


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      8         8         0   100.00%

================================Expression Details================================

Expression Coverage for instance /\ALSU_tb#DUT  --

  File ALSU.v
----------------Focused Expression View-----------------
Line       17 Item    1  ((red_op_A_reg | red_op_B_reg) & (opcode_reg[1] | opcode_reg[2]))
Expression totals: 4 of 4 input terms covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
   red_op_A_reg         Y
   red_op_B_reg         Y
  opcode_reg[1]         Y
  opcode_reg[2]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_B_reg)
  Row   2:          1  red_op_A_reg_1        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_B_reg)
  Row   3:          1  red_op_B_reg_0        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_A_reg)
  Row   4:          1  red_op_B_reg_1        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_A_reg)
  Row   5:          1  opcode_reg[1]_0       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[2])
  Row   6:          1  opcode_reg[1]_1       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[2])
  Row   7:          1  opcode_reg[2]_0       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[1])
  Row   8:          1  opcode_reg[2]_1       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[1])

----------------Focused Expression View-----------------
Line       18 Item    1  (opcode_reg[1] & opcode_reg[2])
Expression totals: 2 of 2 input terms covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  opcode_reg[1]         Y
  opcode_reg[2]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  opcode_reg[1]_0       opcode_reg[2]                 
  Row   2:          1  opcode_reg[1]_1       opcode_reg[2]                 
  Row   3:          1  opcode_reg[2]_0       opcode_reg[1]                 
  Row   4:          1  opcode_reg[2]_1       opcode_reg[1]                 

----------------Focused Expression View-----------------
Line       19 Item    1  (invalid_red_op | invalid_opcode)
Expression totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  invalid_red_op         Y
  invalid_opcode         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  invalid_red_op_0      ~invalid_opcode               
  Row   2:          1  invalid_red_op_1      ~invalid_opcode               
  Row   3:          1  invalid_opcode_0      ~invalid_red_op               
  Row   4:          1  invalid_opcode_1      ~invalid_red_op               


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      49        41         8    83.67%

================================Statement Details================================

Statement Coverage for instance /\ALSU_tb#DUT  --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU.v
    1                                                module ALSU(A, B, cin, serial_in, red_op_A, red_op_B, opcode, bypass_A, bypass_B, clk, rst, direction, leds, out);
    2                                                parameter INPUT_PRIORITY = "A";
    3                                                parameter FULL_ADDER = "ON";
    4                                                input clk, rst, cin, red_op_A, red_op_B, bypass_A, bypass_B, direction, serial_in;
    5                                                input [2:0] opcode;
    6                                                input signed[2:0] A, B;
    7                                                output reg [15:0] leds;
    8                                                output reg signed [5:0] out;
    9                                                
    10                                               reg red_op_A_reg, red_op_B_reg, bypass_A_reg, bypass_B_reg, direction_reg, serial_in_reg;
    11                                               reg signed [1:0]cin_reg;
    12                                               reg [2:0] opcode_reg;
    13                                               reg signed [2:0]A_reg, B_reg;
    14                                               wire invalid_red_op, invalid_opcode, invalid;
    15                                               
    16                                               //Invalid handling
    17              1                         40     assign invalid_red_op = (red_op_A_reg | red_op_B_reg) & (opcode_reg[1] | opcode_reg[2]);
    18              1                         36     assign invalid_opcode = opcode_reg[1] & opcode_reg[2];
    19              1                         20     assign invalid = invalid_red_op | invalid_opcode;
    20                                               
    21                                               //Registering input signals
    22              1                         82     always @(posedge clk or posedge rst) begin
    23                                                 if(rst) begin
    24              1                          8          cin_reg <= 0;
    25              1                          8          red_op_B_reg <= 0;
    26              1                          8          red_op_A_reg <= 0;
    27              1                          8          bypass_B_reg <= 0;
    28              1                          8          bypass_A_reg <= 0;
    29              1                          8          direction_reg <= 0;
    30              1                          8          serial_in_reg <= 0;
    31              1                          8          opcode_reg <= 0;
    32              1                          8          A_reg <= 0;
    33              1                          8          B_reg <= 0;
    34                                                 end else begin
    35              1                         74          cin_reg <= cin;
    36              1                         74          red_op_B_reg <= red_op_B;
    37              1                         74          red_op_A_reg <= red_op_A;
    38              1                         74          bypass_B_reg <= bypass_B;
    39              1                         74          bypass_A_reg <= bypass_A;
    40              1                         74          direction_reg <= direction;
    41              1                         74          serial_in_reg <= serial_in;
    42              1                         74          opcode_reg <= opcode;
    43              1                         74          A_reg <= A;
    44              1                         74          B_reg <= B;
    45                                                 end
    46                                               end
    47                                               
    48                                               //leds output blinking 
    49              1                         82     always @(posedge clk or posedge rst) begin
    50                                                 if(rst) begin
    51              1                          8          leds <= 0;
    52                                                 end else begin
    53                                                     if (invalid)
    54              1                         25             leds <= ~leds;
    55                                                     else
    56              1                         49             leds <= 0;
    57                                                 end
    58                                               end
    59                                               
    60                                               //ALSU output processing
    61              1                         75     always @(posedge clk or posedge rst) begin
    62                                                 if(rst) begin
    63              1                          8         out <= 0;
    64                                                 end
    65                                                 else begin
    66                                                   if (invalid) 
    67              1                         25             out <= 0;
    68                                                   else if (bypass_A_reg && bypass_B_reg)
    69              1                    ***0***           out <= (INPUT_PRIORITY == "A")? A_reg: B_reg;
    70                                                   else if (bypass_A_reg)
    71              1                    ***0***           out <= A_reg;
    72                                                   else if (bypass_B_reg)
    73              1                    ***0***           out <= B_reg;
    74                                               
    75                                                   else begin
    76                                                       case (opcode_reg)
    77                                                         3'h0: begin
    78              1                         14                 leds <= 16'h0; 
    79                                                           if (red_op_A_reg && red_op_B_reg)
    80              1                    ***0***                   out = (INPUT_PRIORITY == "A")? |A_reg: |B_reg;
    81                                                           else if (red_op_A_reg) 
    82              1                    ***0***                   out <= |A_reg;
    83                                                           else if (red_op_B_reg)
    84              1                    ***0***                   out <= |B_reg;
    85                                                           else 
    86              1                         14                   out <= A_reg | B_reg;
    87                                                         end
    88                                                         3'h1: begin
    89                                                           if (red_op_A_reg && red_op_B_reg)
    90              1                    ***0***                   out <= (INPUT_PRIORITY == "A")? ^A_reg: ^B_reg;
    91                                                           else if (red_op_A_reg) 
    92              1                    ***0***                   out <= ^A_reg;
    93                                                           else if (red_op_B_reg)
    94              1                          1                   out <= ^B_reg;
    95                                                           else 
    96              1                          8                   out <= A_reg ^ B_reg;
    97                                                         end
    98                                                         3'h2:begin
    99                                                           if(FULL_ADDER == "ON")
    100             1                          4                 out <= A_reg + B_reg + cin_reg;
    101                                                          else  
    102                                                          out <= A_reg + B_reg;
    103                                                        end
    104                                              
    105             1                          4               3'h3: out <= A_reg * B_reg;
    106                                                        3'h4: begin
    107                                                          if (direction_reg)
    108             1                          3                   out <= {out[4:0], serial_in_reg};
    109                                                          else
    110             1                          5                   out <= {serial_in_reg, out[5:1]};
    111                                                        end
    112                                                        3'h5: begin
    113                                                          if (direction_reg)
    114             1                          2                   out <= {out[4:0], out[5]};
    115                                                          else
    116             1                          1                   out <= {out[0], out[5:1]};

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        120       114         6    95.00%

================================Toggle Details================================

Toggle Coverage for instance /\ALSU_tb#DUT  --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                            A[0-2]           1           1                              100.00 
                                        A_reg[2-0]           1           1                              100.00 
                                            B[0-2]           1           1                              100.00 
                                        B_reg[2-0]           1           1                              100.00 
                                          bypass_A           1           1                              100.00 
                                      bypass_A_reg           1           1                              100.00 
                                          bypass_B           0           0                                0.00 
                                      bypass_B_reg           0           0                                0.00 
                                               cin           1           1                              100.00 
                                        cin_reg[1]           0           0                                0.00 
                                        cin_reg[0]           1           1                              100.00 
                                               clk           1           1                              100.00 
                                         direction           1           1                              100.00 
                                     direction_reg           1           1                              100.00 
                                           invalid           1           1                              100.00 
                                    invalid_opcode           1           1                              100.00 
                                    invalid_red_op           1           1                              100.00 
                                        leds[15-0]           1           1                              100.00 
                                       opcode[0-2]           1           1                              100.00 
                                   opcode_reg[2-0]           1           1                              100.00 
                                          out[5-0]           1           1                              100.00 
                                          red_op_A           1           1                              100.00 
                                      red_op_A_reg           1           1                              100.00 
                                          red_op_B           1           1                              100.00 
                                      red_op_B_reg           1           1                              100.00 
                                               rst           1           1                              100.00 
                                         serial_in           1           1                              100.00 
                                     serial_in_reg           1           1                              100.00 

Total Node Count     =         60 
Toggled Node Count   =         57 
Untoggled Node Count =          3 

Toggle Coverage      =      95.00% (114 of 120 bins)


Total Coverage By Instance (filtered view): 70.10%

